const program = require('commander')
const path = require('path')
const fs = require('fs')
const authenticator = require('authenticator')

program.version('1.1.0')

// init
const defaultPath = path.join(__dirname, '/wallet.json')
const fileExists = fs.existsSync(defaultPath)
var wallet = null
if (fileExists) {
  const data = fs.readFileSync(defaultPath);
  wallet = JSON.parse(data.toString())
} else {
  const walletTemplate = {
    authenticators: []
  }
  fs.writeFileSync(defaultPath, JSON.stringify(walletTemplate), (err) => {
    if (err) throw err
    console.log('New wallet.json is created.')
  })
}

// Options:
program
  .option('-l, --list', 'list wallet authenticators info')
  .option('-t, --token <accountName>', 'check authenticators formatted token')
  .option('-a, --add <accountName> <formattedKey>', 'add authenticator key to wallet')
  .option('-r, --remove <accountName>', 'remove key in wallet')
  .option('-y, --verify <accountName> <formattedToken>', 'verify the token is generated by specific key in wallet')
  .option('-g, --generate <accountName> [issuer]',
    'generate new authenticator\n' +
    'example: example@gmail.com \'Neo Anderson\'')


// 必须在.parse()之前，因为node的emit()是即时的
program.on('--help', function () {
  console.log('  Examples:')
  console.log('')
  console.log('    this is an example')
  console.log('')
})

program.parse(process.argv)

if (program.list) {
  for (let i = 0; i < wallet.authenticators.length; i++) {
    console.log(wallet.authenticators[i].accountName + ': ' + wallet.authenticators[i].formattedKey)
  }
}

if (program.token) {
  for (let i = 0; i < wallet.authenticators.length; i++) {
    if (wallet.authenticators[i].accountName === program.token) {
      const id = setInterval(async () => {
        const formattedToken = authenticator.generateToken(wallet.authenticators[i].formattedKey)
        const now = new Date()
        console.log(now + ': ' + formattedToken)
      }, 1000)
    }
  }
}

if (program.add) {
  const accountName = program.add
  const formattedKey = getArgsString(program.args)
  const token = {
    accountName: accountName,
    formattedKey: formattedKey
  }
  wallet.authenticators.push(token)
  saveWallet(wallet)
  console.log(token)
}

if (program.remove) {
  for (let i = 0; i < wallet.authenticators.length; i++) {
    if (wallet.authenticators[i].accountName === program.remove) {
      const accountName = wallet.authenticators[i].accountName
      wallet.authenticators.splice(i, 1)
      console.log('remove ' + accountName + ' success')
    }
  }
  saveWallet(wallet)
}

if (program.verify) {
  const formattedToken = getArgsString(program.args)
  for (let i = 0; i < wallet.authenticators.length; i++) {
    if (wallet.authenticators[i].accountName === program.verify) {
      const result = authenticator.verifyToken(wallet.authenticators[i].formattedKey, formattedToken)
      console.log(result ? 'true' : 'false')
    }
  }
}

if (program.generate) {
  console.log('generate new authenticator please keep formatted key safety')
  let issuer = ''
  if (program.args.length > 0) {
    issuer = getArgsString(program.args)
  }
  const formattedKey = authenticator.generateKey()
  const otpauth = authenticator.generateTotpUri(formattedKey, program.generate, issuer, 'SHA1', 6, 30)
  console.log('Formatted Key= ' + formattedKey)
  console.log('otpauth= ' + otpauth)
}

function getArgsString(argsArray) {
  let string = ''
  for (let i = 0; i < argsArray.length; i++) {
    i < argsArray.length && i > 0 ? string += ' ' : ''
    string += argsArray[i]
  }
  return string
}

function saveWallet(wallet) {
  return fs.writeFileSync(defaultPath, JSON.stringify(wallet))
}
